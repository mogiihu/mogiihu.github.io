{
    "sourceFile": "src/content/posts/2021-10-11-学了Vite再来看看Snowpack吧/index.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756113126902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756113126902,
            "name": "Commit-0",
            "content": "---\ntitle: 学了Vite再来看看Snowpack吧\npublished: 2021-10-11\ndescription: ''\nimage: ''\ntags: [基建, 前端]\ncategory: '基建'\ndraft: false \nlang: ''\n---\n\n# 什么是 Snowpack？\n\n看下官网的介绍：\n\n**Snowpack is a lightning-fast frontend build tool, designed for the modern web.** It is an alternative to heavier, more complex bundlers like webpack or Parcel in your development workflow. Snowpack leverages JavaScript's native module system ([known as ESM](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)) to avoid unnecessary work and stay fast no matter how big your project grows.\n\nOnce you try it, it's impossible to go back to anything else.\n\n****\n\n**Snowpack 是一款闪电般快速的前端构建工具，专为现代 Web 设计。** 它是开发工作流程中更重、更复杂的打包程序（如 webpack 或 Parcel）的替代品。Snowpack 利用 JavaScript 的原生模块系统（[称为 ESM](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)）来避免不必要的工作，无论您的项目有多大，都能保持快速。\n\n一旦你尝试过，就不可能回到其他任何事情上。\n\n从这段介绍可以看出，Snowpack 的特点就是——快！\n\n# 本文目标\n\n-   基于 Snowpack 搭建 react 项目，包括路由、UI等功能；\n-   项目的扩展功能，如 typescript、less、eslint、stylelint、prettier；\n\n<!---->\n\n-   围绕项目的相关配置内容，如环境变量、路径别名、打包路径等。\n\n\\\n\n\n# 创建 Snowpack 项目\n\n## 初始化\n\n通过以下命令创建 Snowpack 项目。\n\n```\nnpx create-snowpack-app react-snowpack --template @snowpack/app-template-minimal\n```\n\n创建完成后可以通过以下两个命令进入该目录，进行启动。\n\n```\ncd react-snowpack\nnpm run start\n```\n\n运行完后，你就可以看到 Snowpack 启动的项目了。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1707a72e917d4c42adf7107d3559b4d3~tplv-k3u1fbpfcp-zoom-1.image)\n\n打开这个项目你会发现里面空空如也，别急，接下来我们为它添加上 React。\n\n## React 的第一个页面\n\n运行以下命令进行安装。\n\n```\nnpm install react react-dom react-router-dom --save\n```\n\n将 React logo 图片放置在 `src/assets/images` 下。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b13c2882bf674360b3f2929555e83e1e~tplv-k3u1fbpfcp-zoom-1.image)\n\n在根目录下创建文件夹 `src`，`src` 内创建 `App.jsx` 文件，这将是我们的第一个页面，`App.jsx` 的内容如下。\n\n```\nimport React, { useState, useEffect } from \"react\";\nimport logo from \"./assets/images/logo.png\";\nimport \"./App.css\";\n\nfunction App() {\n\t\tconst [count, setCount] = useState(0);\n  \n  \tuseEffect(() => {\n    \t\tconst timer = setTimeout(() => setCount(count + 1), 1000);\n    \t\treturn () => clearTimeout(timer);\n  \t}, [count, setCount]);\n  \n  \treturn (\n    \t\t<div className=\"App\">\n      \t\t\t<header className=\"App-header\">\n              \t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n        \t\t\t\t<h1>Hello snowpack!</h1>\n       \t\t\t\t  <p>\n          \t\t\t\tPage has been open for <code>{count}</code> seconds.\n       \t\t\t\t  </p>\n      \t\t\t</header>\n   \t\t\t</div>\n  );\n}\n\nexport default App;\n```\n\n创建 `src/App.css` ，并添加以下内容：\n\n```\n.App {\n  \ttext-align: center;\n}\n\n.App p {\n  \tmargin: 0.4rem;\n}\n\n.App-logo {\n  \theight: 40vmin;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  \t.App-logo {\n    \tanimation: App-logo-spin infinite 20s linear;\n  \t}\n}\n\n.App-header {\n    background-color: #282c34;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n}\n\n@keyframes App-logo-spin {\n    from {\n      \ttransform: rotate(0deg);\n    }\n    to {\n      \ttransform: rotate(360deg);\n    }\n}\n```\n\n打开 index.html 文件，添加一个空的 `<div>` 标签作为标记你想要用 React 显示内容的位置。\n\n```\n<div id=\"root\"></div>\n```\n\n删除根目录下的 `index.js` 文件，创建 `index.jsx`，用来渲染 React Dom。\n\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport APP from \"./src/App\";\nReactDOM.render(\n  \t<React.StrictMode>\n    \t\t<APP />\n  \t</React.StrictMode>,\n  \tdocument.getElementById(\"root\")\n);\n```\n\n等待页面自动刷新后，就可以看到我们创建的第一个页面了。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bda11788df7400d990ef19629c863af~tplv-k3u1fbpfcp-zoom-1.image)\n\n## 添加路由\n\n在单页面项目中路由是必不可少的，下面我们来添加路由。\n\n分别创建 `src/pages/hello/index.jsx` 文件和 `src/pages/snowpack/index.jsx` 文件，作为路由跳转的测试页面。内容如下：\n\n```\n// hello/index.jsx\nimport React from \"react\";\n\nfunction Hello() {\n  \treturn <div className=\"App\">I'm Hello, How are u?</div>;\n}\n\nexport default Hello;\n```\n\n```\n// snowpack/index.jsx\nimport React from \"react\";\n\nfunction Snowpack() {\n  \treturn <div className=\"App\">I'm Snowpack, I'm fine thank you, and you?</div>;\n}\n\nexport default Snowpack;\n```\n\n将 `App.jsx` 和 `APP.css` 移到 src/home 下，并更改文件名， `App.jsx` -> `index.jsx` ， `APP.css` -> `index.css` ，更改 `index.jsx` 的组件名为 `Home`。\n\n在 `src` 下重新创建 `APP.jsx` 放置路由内容。\n\n```\nimport React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport Index from \"./pages/home/index.jsx\";\nimport Hello from \"./pages/hello/index.jsx\";\nimport Snowpack from \"./pages/snowpack/index.jsx\";\n\nfunction App() {\n  \treturn (\n    \t\t<div className=\"index\">\n            <HashRouter>\n                <Switch>\n                    <Route exact path=\"/\" component={Index} />\n                    <Route exact path=\"/hello\" component={Hello} />\n                    <Route exact path=\"/snowpack\" component={Snowpack} />\n                </Switch>\n            </HashRouter>\n    \t\t</div>\n  \t);\n}\n```\n\n在 `pages/home/index` 下添加路由跳转。\n\n```\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from '../../assets/images/logo.svg';\nimport './index.css';\n\nfunction Home() {\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n        const timer = setTimeout(() => setCount(count + 1), 1000);\n        return () => clearTimeout(timer);\n    }, [count, setCount]);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to=\"/hello\">hello</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/snowpack\">snowpack</Link>\n                        </li>\n                    </ul>\n                </nav>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h1>Hello snowpack!</h1>\n                <p>\n                    Page has been open for <code>{count}</code> seconds.\n                </p>\n            </header>\n        </div>\n    );\n}\n\nexport default Home;\n```\n\n现在在页面中出现了跳转链接，点击链接就可以实现跳转了！\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ef8b8b2501245cf98dca1987cb19700~tplv-k3u1fbpfcp-zoom-1.image)跳转效果：![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca17c31a890d46c086dbbcec93450ba7~tplv-k3u1fbpfcp-zoom-1.image)\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e3086a4e3c747cf96429f7db0c6a1de~tplv-k3u1fbpfcp-zoom-1.image)\n## Antd\n\n安装以下包，`@ant-design/icons` 为 `antd icon` 依赖库， `dayjs` 为 `antd` 内部组件依赖库。\n\n```\nnpm install antd @ant-design/icons dayjs --save \n```\n\n然后在 `App.jsx` 中引入 `import \"antd/dist/antd.css\";` 所需css，就可以直接使用相关组件。\n\n# 工程化配置\n\n基本的项目建好了，下面我们开始工程化相关配置。\n\n## Less\n\n安装 `less`。\n\n```\nnpm install less --save-dev\n```\n\n安装 `snowpack-plugin-less`，使 `snowpack` 可以对 `less` 进行识别并转换为 `css`。\n\n```\nnpm install snowpack-plugin-less --save-dev\n```\n\n然后在 `snowpack.config.mjs` 中添加 `snowpack-plugin-less` 插件。\n\n```\n// snowpack.config.mjs\nexport default {\n  \tplugins: ['snowpack-plugin-less']\n}\n```\n\n## Eslint\n\n安装 `eslint` 。\n\n```\nnpm install eslint --save-dev\n```\n\n安装 eslint 包后运行 `eslint --init` ，下图为我的安装选项。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec045c964308413bb71119c41d493859~tplv-k3u1fbpfcp-zoom-1.image)\n\n安装完成后会在项目中自动创建，`.eslintrc`文件，使用 hooks 的同学还需要额外安装 `eslint-plugin-react-hooks` 包，以便 eslint 可以执行 hooks 的相关规则。\n\n下面是推荐配置：\n\n```\nmodule.exports = {\n    extends: [\n        'eslint:recommended',\n        'plugin:react/recommended',\n        'plugin:react-hooks/recommended',\n        'standard',\n        'prettier',\n    ],\n    env: {\n        browser: true,\n        commonjs: true,\n        es6: true\n    },\n    parser: '@typescript-eslint/parser',\n    parserOptions: {\n        ecmaFeatures: {\n            jsx: true,\n            modules: true\n        },\n        sourceType: 'module',\n        ecmaVersion: 6\n    },\n    plugins: ['react', '@typescript-eslint'],\n    settings: {\n        'import/ignore': ['node_modules'],\n        react: {\n            version: 'latest'\n        }\n    },\n    rules: {\n        quotes: [2, 'single'],\n        'no-console': 0,\n        'no-debugger': 1,\n        'no-var': 1,\n        semi: ['error', 'always'],\n        'no-irregular-whitespace': 0,\n        'no-trailing-spaces': 1,\n        'eol-last': 0,\n        'no-unused-vars': [\n            1,\n            {\n                vars: 'all',\n                args: 'after-used'\n            }\n        ],\n        'no-prototype-builtins': 0,\n        'no-case-declarations': 0,\n        'no-underscore-dangle': 0,\n        'no-alert': 2,\n        'no-lone-blocks': 0,\n        'no-class-assign': 2,\n        'no-cond-assign': 2,\n        'no-const-assign': 2,\n        'no-delete-var': 2,\n        'no-dupe-keys': 2,\n        'use-isnan': 2,\n        'no-duplicate-case': 2,\n        'no-dupe-args': 2,\n        'no-empty': 2,\n        'no-func-assign': 2,\n        'no-invalid-this': 0,\n        'no-redeclare': 2,\n        'no-spaced-func': 2,\n        'no-this-before-super': 0,\n        'no-undef': 2,\n        'no-return-assign': 0,\n        'no-script-url': 2,\n        'no-use-before-define': 0,\n        'no-extra-boolean-cast': 0,\n        'no-unreachable': 1,\n        'comma-dangle': 2,\n        'no-mixed-spaces-and-tabs': 2,\n        'prefer-arrow-callback': 0,\n        'arrow-parens': 0,\n        'arrow-spacing': 0,\n        camelcase: 0,\n        'jsx-quotes': [1, 'prefer-double'],\n        'react/display-name': 0,\n        'react/forbid-prop-types': [\n            2,\n            {\n                forbid: ['any']\n            }\n        ],\n        'react/jsx-boolean-value': 0,\n        'react/jsx-closing-bracket-location': 1,\n        'react/jsx-curly-spacing': [\n            2,\n            {\n                when: 'never',\n                children: true\n            }\n        ],\n        'react/jsx-indent': ['error', 4],\n        'react/jsx-key': 2,\n        'react/jsx-no-bind': 0,\n        'react/jsx-no-duplicate-props': 2,\n        'react/jsx-no-literals': 0,\n        'react/jsx-no-undef': 1,\n        'react/jsx-pascal-case': 0,\n        'react/jsx-sort-props': 0,\n        'react/jsx-uses-react': 1,\n        'react/jsx-uses-vars': 2,\n        'react/no-danger': 0,\n        'react/no-did-mount-set-state': 0,\n        'react/no-did-update-set-state': 0,\n        'react/no-direct-mutation-state': 2,\n        'react/no-multi-comp': 0,\n        'react/no-set-state': 0,\n        'react/no-unknown-property': 2,\n        'react/prefer-es6-class': 2,\n        'react/prop-types': 0,\n        'react/react-in-jsx-scope': 0,\n        'react/self-closing-comp': 0,\n        'react/sort-comp': 0,\n        'react/no-array-index-key': 0,\n        'react/no-deprecated': 1,\n        'react/jsx-equals-spacing': 2\n    }\n};\n```\n\n配置成功后很多文件已经变红了，是不是有些同学已经犯强迫症，想要手动修改这些问题了呢。不要急，后面我们会安装 `prettier` ，实现一键整理代码格式。\n\n## Stylelint\n\n有了 `eslint` 自然 `stylelint` 也不能少，`eslint` 帮我们检测js的代码格式，`stylelint` 则帮我们检测 `css` 的代码格式。\n\n首先安装 `stylelint` 相关包，然后需要在项目中创建 `stylelint.config.js` 用来存放 `stylelint` 相关规则。\n\n```\nnpm install stylelint stylelint-config-standard --save-dev \necho {}> stylelint.config.js\n```\n\n下面是推荐配置：\n\n```\nmodule.exports = {\n    extends: ['stylelint-config-standard', 'stylelint-config-prettier'],\n    ignoreFiles: [\n        '**/*.ts',\n        '**/*.tsx',\n        '**/*.png',\n        '**/*.jpg',\n        '**/*.jpeg',\n        '**/*.gif',\n        '**/*.mp3',\n        '**/*.json'\n    ],\n    rules: {\n        'at-rule-no-unknown': [\n            true,\n            {\n                ignoreAtRules: ['extends', 'ignores']\n            }\n        ],\n        indentation: 4,\n        'number-leading-zero': null,\n        'unit-allowed-list': ['em', 'rem', 's', 'px', 'deg', 'all', 'vh', 'vw', '%'],\n        'no-eol-whitespace': [\n            true,\n            {\n                ignore: 'empty-lines'\n            }\n        ],\n        'declaration-block-trailing-semicolon': 'always',\n        'selector-pseudo-class-no-unknown': [\n            true,\n            {\n                ignorePseudoClasses: ['global']\n            }\n        ],\n        'block-closing-brace-newline-after': 'always',\n        'declaration-block-semicolon-newline-after': 'always',\n        'no-descending-specificity': null,\n        'selector-list-comma-newline-after': 'always',\n        'selector-pseudo-element-colon-notation': 'single'\n    }\n};\n```\n\n## Prettier\n\n接下来就到了每个前端开发必备的 `prettier`，有了它再也不用手动整理格式，它可以帮助我们一键整理代码格式。\n\n安装 `prettier`，\n\n```\nnpm install prettier  --save-dev\n```\n\n因为项目中还用到了 `eslint`，所以需要安装 `eslint-config-prettier` ，使 `eslint`可以和 `prettier`相互配合，它可以关闭与 `prettier` 冲突的 `eslint` 规则。\n\n然后通过 ` echo {}> prettier.config.js  `创建 `prettier` 配置文件。\n\n下面是推荐配置：\n\n```\nmodule.exports = {\n    // 一行最多 100 字符\n    printWidth: 100,\n    // 使用 4 个空格缩进\n    tabWidth: 4,\n    // 不使用缩进符，而使用空格\n    useTabs: false,\n    // 行尾需要有分号\n    semi: true,\n    // 使用单引号\n    singleQuote: true,\n    // 对象的 key 仅在必要时用引号\n    quoteProps: 'as-needed',\n    // jsx 不使用单引号，而使用双引号\n    jsxSingleQuote: false,\n    // 末尾不需要逗号\n    trailingComma: 'none',\n    // 大括号内的首尾需要空格\n    bracketSpacing: true,\n    // jsx 标签的反尖括号需要换行\n    jsxBracketSameLine: false,\n    // 箭头函数，只有一个参数的时候，也需要括号\n    arrowParens: 'avoid',\n    // 每个文件格式化的范围是文件的全部内容\n    rangeStart: 0,\n    rangeEnd: Infinity,\n    // 不需要写文件开头的 @prettier\n    requirePragma: false,\n    // 不需要自动在文件开头插入 @prettier\n    insertPragma: false,\n    // 使用默认的折行标准\n    proseWrap: 'preserve',\n    // 根据显示样式决定 html 要不要折行\n    htmlWhitespaceSensitivity: 'css',\n    // 换行符使用 lf\n    endOfLine: 'lf'\n};\n```\n\n然后在命令行中运行以下命令就可以将全部文件进行格式化。\n\n```\nnpx prettier --write .\n```\n\n如果希望在 `vscode` 中通过保存一键格式化，需要安装 [Prettier - Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) 插件，根据[教程](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)对 vscode 配置进行修改。\n\n## Typescript\n\n通过以下命令安装 `typescript` 以及 `react`、`react-dom` 的类型定义。\n\n```\nnpm install typescript --save-dev\nnpm install @types/react --save-dev\nnpm install @types/react-dom --save-dev\nnpm install @typescript-eslint/eslint-plugin --save-dev\nnpm install @typescript-eslint/parser --save-dev\n```\n\n如果需要在编译时进行打包检测，还需要安装以下包。\n\n```\nnpm install @snowpack/plugin-typescript --save-dev\n```\n\n并在 `snowpack.config.mjs` 的 `plugins` 中进行配置：\n\n```\n// snowpack.config.mjs\nexport default {\n  \tplugins: ['@snowpack/plugin-typescript']\n}\n```\n\n通过 ` echo {}> tsconfig.json  `创建 `tsconfig.json` 并进行配置。\n\n以下为推荐配置：\n\n```\n{\n    \"compilerOptions\": {\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true,\n        \"target\": \"ESNext\",\n        \"allowSyntheticDefaultImports\": true,\n        \"strict\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"allowJs\": true,\n        \"outDir\": \"./dist/\",\n        \"esModuleInterop\": true,\n        \"noImplicitAny\": false,\n        \"sourceMap\": true,\n        \"module\": \"esnext\",\n        \"moduleResolution\": \"node\",\n        \"isolatedModules\": true,\n        \"importHelpers\": true,\n        \"lib\": [\"esnext\", \"dom\", \"dom.iterable\"],\n        \"skipLibCheck\": false,\n        \"jsx\": \"react\",\n        \"baseUrl\": \"./src\",\n        \"paths\": {\n              \"@src/*\": [\"*\"],\n              \"@assets/*\": [\"assets/*\"],\n              \"@components/*\": [\"components/*\"],\n              \"@pages/*\": [\"pages/*\"],\n              \"@utils/*\": [\"utils/*\"],\n              \"@servers/*\": [\"servers/*\"],\n              \"@actions/*\": [\"actions/*\"],\n              \"@config\": [\"config\"],\n              \"@routeConfig\": [\"routeConfig\"],\n              \"@request\": [\"request\"]\n          }\n    },\n    \"include\": [\"./src/**/*\", \"./declaration.d.ts\"],\n    \"exclude\": [\"node_modules\"]\n}\n```\n\n`tsconfig.json` 中 `paths` 为 ts 所支持的路径别名，除了在 `tsconfig.json` 中需要设置，还需要在 `snowpack.config.mjs` 中进行配置，以便于让 `snowpack` 打包时可以转换成对应路径，关于项目配置请看 [snowpack.config.mjs 相关配置-路径别名配置] 相关章节。\n\n## pre-commit\n\n安装 `husky` 和 `list-staged`。\n\n```\nnpm install husky -save-dev\nnpm install lint-staged -save-dev\n```\n\n在 `package.json` 中添加一下配置。\n\n```\n\"scripts\": {\n\t\t\t\t...,\n        \"lint:jsx\": \"eslint --ext .jsx,.js src\",\n        \"lint:css\": \"stylelint --aei .less .css src\",\n        \"precommit\": \"lint-staged\",\n        \"precommit-msg\": \"echo 'Pre-commit checks...' && exit 0\"\n},\n\"husky\": {\n\t\t\"hooks\": {\n\t\t\t\t\"pre-commit\": \"npm run lint-staged\"\n\t\t}\n},\n\"lint-staged\": {\n    \"*.{js,jsx,ts,tsx}\": [\n        \"eslint --fix\",\n        \"prettier --write\"\n    ],\n    \"*.{css,less}\": [\n        \"stylelint --fix\",\n        \"prettier --write\"\n    ]\n}\n```\n\n# snowpack.config.mjs 相关配置\n\n## 打包路径配置\n\n首先我们先整理下项目的公共资源文件，一般来说会把项目的 `index.html` 及 `index.css` 看做静态资源放置在 `/public` 目录下。如下图所示：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/36d4ebefe1634b10bc513a9c86895196~tplv-k3u1fbpfcp-zoom-1.image)\n\n移动过后注意要修改 `index.html` 中 css 及 js 的引入路径。\n\n按上面步骤操作完成后，项目的基本结构和内容就已经配置好了，现在我们在命令行运行 `npm run build` 看一下打包后的文件结构是怎样的。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ee7dd70958f493ab824796347503382~tplv-k3u1fbpfcp-zoom-1.image)\n\n打包结束后在项目根目录下生成了 `build` 文件夹，展开 `build` 可以看到，`public` 中的文件被打包至 `build/public` 文件中，但通常我们期望 `index.html` 能在 `build` 的根目录下。可以通过以下配置将 `public` 挂载到 `build`根目录下。\n\n```\n// snowpack.config.mjs\nexport default {\n  \tmount: {\n\t\t\t\tpublic: '/',\n\t\t}\n}\n```\n\n并且打包后的文件不只有我们的业务代码，还有项目的配置代码，如 `package.json`、`perttier.config.js`、`README.md` 等。这些代码是我们不需要的，并且会占用少量空间，可以通过以下配置设置只打包 `src` 目录下的文件。\n\n```\n// snowpack.config.mjs\nexport default {\n  \tmount: {\n\t\t\t\tsrc: '/src',\n\t\t}\n}\n```\n\n## 打包输出目录配置\n\n```\n// snowpack.config.mjs\nexport default {\n  \tout: 'dist'\n};\n```\n\n## 路径别名配置\n\n通过 `alias` 可配置路径缩写别名，及 node 包的引入别名。\n\n```\n// snowpack.config.mjs\nexport default {\n    alias: {\n        // Type 1: node 包 引入别名\n        lodash: 'lodash-es',\n        // Type 2: 本地文件引入别名\n        '@src': './src',\n        '@assets': './src/assets',\n        '@components': './src/components',\n        '@pages': './src/pages',\n        '@utils': './src/utils/',\n        '@servers': './src/servers',\n        '@actions': './src/actions',\n        '@config': './src/config.ts',\n        '@routeConfig': './src/routeConfig.tsx',\n        '@request': './src/request.ts'\n    },\n};\n```\n\n## 打包环境区分\n\n通常我们在打包时，希望通过打包命令区分包所对应环境。\\\n首先需要在 `package.json` 的 `scripts` 配置中，给对应 `script` 命令添加环境所对应值。\n\n```\n\"scripts\": {\n    \"start\": \"NODE_ENV=development snowpack dev\",\n    \"build:test\": \"NODE_ENV=test snowpack build\",\n    \"build:prod\": \"NODE_ENV=production snowpack build\",\n},\n```\n\n如果需要在 `snowpack.config.mjs` 中获取环境，通过 `process.env.NODE_ENV` 可直接获取到，如下：\n\n```\n// snowpack.config.mjs\nexport default {\n  \tplugins: (() => {\n        const plugin = ['snowpack-plugin-less'];\n        if (process.env.NODE_ENV === 'development') {\n            plugin.push('@snowpack/plugin-typescript');\n        }\n        return plugin;\n\t\t})(),\n}\n```\n\n在js文件中则需要通过 `import.meta.env` 中的 `NODE_ENV` 获取，如下：\n\n```\nconst { NODE_ENV } = import.meta.env;\n```\n\n## 设置全局变量\n\n有时我们还需要在设置一些内置的全局变量，供 html 及 js 文件使用，在 `snowpack.config.mjs` 的 `env` 配置中设置即可，如下：\n\n```\n// snowpack.config.mjs\nexport default {\n  \tenv: {\n        ENVIRONMENT: 'test'\n    },\n}\n```\n\n通用在js文件中需要通过 `import.meta.env` 中获取：\n\n```\nconst { ENVIRONMENT } = import.meta.env;\n```\n\n在 HTML 中则可以通过 `%ENVIRONMENT%` 直接使用：\n\n```\n<script>\n  \tconsole.log('%ENVIRONMENT%');\n</script>\n```\n\n在 devtools 中可以看到该部分内容变成了下面这样。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/261bebe9ba2c48388f1b971c5b3b682c~tplv-k3u1fbpfcp-zoom-1.image)\n\n# 问题&注意事项\n\n1.  snowpack 运行时页面报错 **Uncaught ReferenceError: require is not defined.**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44dca969c36c4a2ab085a80e0608e28a~tplv-k3u1fbpfcp-zoom-1.image)\n\n报错原因是由于 snowpack 只支持 ESM 标准代码，不能解析 commonjs。\n\n2.  snowpack **无法解析** `cnpm` 安装的包，所以在安装包后启动报错，或者发现包不生效，可以删除 `node_modules`，用 `npm` 或 `yarn` 安装。\n2.  npm start 时报错\n\n```\n[18:30:15] [esinstall:xmlhttprequest-ssl] /Users/huxiaomiao/pivos/react-snowpack3/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n   Module \"fs\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] /Users/huxiaomiao/pivos/react-snowpack3/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n   Module \"url\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] /Users/huxiaomiao/pivos/react-snowpack3/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n   Module \"https\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] /Users/huxiaomiao/pivos/react-snowpack3/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n   Module \"child_process\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] /Users/huxiaomiao/pivos/react-snowpack3/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n   Module \"url\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] /Users/huxiaomiao/pivos/react-snowpack3/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n   Module \"fs\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] /Users/huxiaomiao/pivos/react-snowpack3/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n   Module \"http\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] /Users/huxiaomiao/pivos/react-snowpack3/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n   Module \"http\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] /Users/huxiaomiao/pivos/react-snowpack3/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n   Module \"https\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] /Users/huxiaomiao/pivos/react-snowpack3/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n   Module \"child_process\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] url?commonjs-external\n   Module \"url\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] https?commonjs-external\n   Module \"https\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] http?commonjs-external\n   Module \"http\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] fs?commonjs-external\n   Module \"fs\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [esinstall:xmlhttprequest-ssl] child_process?commonjs-external\n   Module \"child_process\" (Node.js built-in) is not available in the browser. Run Snowpack with --polyfill-node to fix.\n[18:30:15] [snowpack] Install failed for xmlhttprequest-ssl.\n```\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1dff51ac8f14ee2b9e223cb2f2b5319~tplv-k3u1fbpfcp-zoom-1.image)\n\n解决方式：\n\n<https://www.snowpack.dev/reference/configuration#packageoptionspolyfillnode>\n\n# 最后\n\n经过这些一个基本的项目框架就基本完成了，小伙伴们快去动手实践下吧，有问题欢迎在评论区探讨。\n\n下面为我搭建的简单项目框架，想体验的朋友们可以直接 clone 下来玩哦~\n\n<https://github.com/mogiihu/snowpack-react>\n"
        }
    ]
}