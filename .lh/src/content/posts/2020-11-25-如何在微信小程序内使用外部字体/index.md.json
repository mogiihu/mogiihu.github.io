{
    "sourceFile": "src/content/posts/2020-11-25-如何在微信小程序内使用外部字体/index.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1756112565801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756112582018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,67 +8,40 @@\n draft: false \n lang: ''\n ---\n \n-## Taro 3.x 时代\n+### 通过 font-face 使用外部字体\n \n-Taro 在今年 7 月份正式推出推出 3.0 版本，与 Taro1/2 编译型架构不同，Taro3 是一种解释型架构。可以让开发者获得完整的 React/Vue 等框架的开发体验。\n+首先通过 css 引入地址，然后在需要使用该字体时使用定义的 `font-family` 即可。\n \n-## 升级之旅由此开始\n-\n-### 项目版本信息\n-\n+```css\n+@font-face {\n+  font-family: \"kaiti\";\n+  src: url(\"https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf\");\n+}\n+.test {\n+  font-family: \"kaiti\";\n+}\n ```\n-Taro: 2.1.5 -> 3.0.15\n-React: / -> 17.0.0\n-```\n \n-### 项目初始化\n+这里的 url 要用 CDN 地址，本地地址无效。\n \n-最初，我按照 Taro 官方提供的[迁移指南](https://taro-docs.jd.com/taro/docs/migration)上的步骤进行升级。但是由于 Taro3 的 babel 配置及 webpack 配置发生改变，有大量的 npm 包缺少或是剩余，项目报错不好排查。所以我决定采从新建项目开始，让 taro init 帮我们解决一些基本的项目配置工作。\n+### 通过 wx.loadFontFace 使用外部字体\n \n-首先全局安装 @tarojs/cli , 使用 taro 进行项目初始化。\n+这里需要在 app.js 中将需要使用的字体引入，然后通过 `font-family` 使用改字体。\n \n-```shell\n-npm install -g @tarojs/cli\n-taro init myApp\n-```\n-\n-下面是我的安装选项：\n-\n-![项目初始化](./img1.png)\n-\n-因为之前的项目结构和生成的一致，这里就不对生成的项目结构进行改变，进行下一步：修改 config 配置。\n-\n-![项目初始化](./img2.png)\n-\n-### 开发配置\n-\n-在上面的目录中 config 内放置的就是有关项目配置的文件，这里 taro 帮我们自动创建了三个配置文件，`dev.js`/`index.js`/ `prod.js` ，`dev.js` 对应的是开发环境的项目配置，`prod.js` 为生产环境，`index.js` 则是在开发环境和生产环境中都会用到的配置。\n-\n-在开发环境中，我主要添加了路径别名，用来对路径进行缩写\n-\n ```js\n-const path = require(\"path\");\n-module.exports = {\n-  env: {\n-    NODE_ENV: '\"development\"',\n+wx.loadFontFace({\n+  family: \"Bitstream\",\n+  source:\n+    'url(\"https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf\")',\n+  success: (msg) => {\n+    console.log(msg);\n   },\n-  defineConstants: {},\n-  mini: {},\n-  h5: {\n-    esnextModules: [\"taro-ui\"],\n-  },\n-  alias: {\n-    pages: path.resolve(__dirname, \"..\", \"src/pages\"),\n-    components: path.resolve(__dirname, \"..\", \"src/components\"),\n-    util: path.resolve(__dirname, \"..\", \"src/util\"),\n-    assets: path.resolve(__dirname, \"..\", \"src/assets\"),\n-  },\n-};\n+});\n ```\n \n-在原来的 taro2 项目中还有对 babel 的配置，由于 Taro3 的项目中自动集成了 `babel-preset-taro` 包, 并且通过 `babel.config.js` 进行 babel 配置，所以新项目的 index.js 配置文件中也不需要额外添加 babel 配置，可以自行修改 `babel.config.js`。\n-\n-### 页面配置\n-\n-在旧版本中，页面/项目 配置挂载在类组件的类属性或函数式的 config 属性上，通过 AST 分析取出来，生成 JSON 文件，这样无法动态生成配置。在 taro3 中，我们需要在 `页面名.config.js` ，文件中放置页面/项目的配置内容，并且该文件必须和页面/项目在同一文件夹。\n+```css\n+.test {\n+  font-family: \"Bitstream\";\n+}\n+```\n"
                },
                {
                    "date": 1756112647959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n ---\n title: 如何在微信小程序内使用外部字体\n-published: 2020-11-25 11:07:09\n+published: 2020-11-25\n description: ''\n image: ''\n tags: [小程序, 前端, Taro]\n category: '小程序'\n"
                }
            ],
            "date": 1756112565801,
            "name": "Commit-0",
            "content": "---\ntitle: 如何在微信小程序内使用外部字体\npublished: 2020-11-25 11:07:09\ndescription: ''\nimage: ''\ntags: [小程序, 前端, Taro]\ncategory: '小程序'\ndraft: false \nlang: ''\n---\n\n## Taro 3.x 时代\n\nTaro 在今年 7 月份正式推出推出 3.0 版本，与 Taro1/2 编译型架构不同，Taro3 是一种解释型架构。可以让开发者获得完整的 React/Vue 等框架的开发体验。\n\n## 升级之旅由此开始\n\n### 项目版本信息\n\n```\nTaro: 2.1.5 -> 3.0.15\nReact: / -> 17.0.0\n```\n\n### 项目初始化\n\n最初，我按照 Taro 官方提供的[迁移指南](https://taro-docs.jd.com/taro/docs/migration)上的步骤进行升级。但是由于 Taro3 的 babel 配置及 webpack 配置发生改变，有大量的 npm 包缺少或是剩余，项目报错不好排查。所以我决定采从新建项目开始，让 taro init 帮我们解决一些基本的项目配置工作。\n\n首先全局安装 @tarojs/cli , 使用 taro 进行项目初始化。\n\n```shell\nnpm install -g @tarojs/cli\ntaro init myApp\n```\n\n下面是我的安装选项：\n\n![项目初始化](./img1.png)\n\n因为之前的项目结构和生成的一致，这里就不对生成的项目结构进行改变，进行下一步：修改 config 配置。\n\n![项目初始化](./img2.png)\n\n### 开发配置\n\n在上面的目录中 config 内放置的就是有关项目配置的文件，这里 taro 帮我们自动创建了三个配置文件，`dev.js`/`index.js`/ `prod.js` ，`dev.js` 对应的是开发环境的项目配置，`prod.js` 为生产环境，`index.js` 则是在开发环境和生产环境中都会用到的配置。\n\n在开发环境中，我主要添加了路径别名，用来对路径进行缩写\n\n```js\nconst path = require(\"path\");\nmodule.exports = {\n  env: {\n    NODE_ENV: '\"development\"',\n  },\n  defineConstants: {},\n  mini: {},\n  h5: {\n    esnextModules: [\"taro-ui\"],\n  },\n  alias: {\n    pages: path.resolve(__dirname, \"..\", \"src/pages\"),\n    components: path.resolve(__dirname, \"..\", \"src/components\"),\n    util: path.resolve(__dirname, \"..\", \"src/util\"),\n    assets: path.resolve(__dirname, \"..\", \"src/assets\"),\n  },\n};\n```\n\n在原来的 taro2 项目中还有对 babel 的配置，由于 Taro3 的项目中自动集成了 `babel-preset-taro` 包, 并且通过 `babel.config.js` 进行 babel 配置，所以新项目的 index.js 配置文件中也不需要额外添加 babel 配置，可以自行修改 `babel.config.js`。\n\n### 页面配置\n\n在旧版本中，页面/项目 配置挂载在类组件的类属性或函数式的 config 属性上，通过 AST 分析取出来，生成 JSON 文件，这样无法动态生成配置。在 taro3 中，我们需要在 `页面名.config.js` ，文件中放置页面/项目的配置内容，并且该文件必须和页面/项目在同一文件夹。\n"
        }
    ]
}